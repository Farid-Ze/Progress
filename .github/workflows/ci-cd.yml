name: CI/CD Pipeline

# Optional integrations (currently disabled, uncomment and add secrets to enable):
# - SNYK_TOKEN: For Snyk security scanning
# - SLACK_WEBHOOK: For deployment notifications  
# - LHCI_GITHUB_APP_TOKEN: For Lighthouse CI performance monitoring

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: merajut-asa

jobs:
  # Lint and test phase
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [web, api-gateway, auth-service, campaign-service, payment-service, user-service, community-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linter
        run: npm run lint
        
      - name: Run type check
        run: npm run type-check
        
      - name: Run tests
        run: npm run test
        env:
          CI: true
          
      - name: Check build
        run: npm run build
        
      - name: Performance budget check
        run: npm run performance:check
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: ${{ matrix.service }}
          name: codecov-${{ matrix.service }}

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      # Note: Snyk security scanning disabled - add SNYK_TOKEN secret to enable
      # - name: Run Snyk to check for vulnerabilities
      #   continue-on-error: true
      #   uses: snyk/actions/node@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --severity-threshold=high
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript

  # Build Docker images
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        service: [web, api-gateway, auth-service, campaign-service, payment-service, user-service, community-service]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Determine Docker context
        id: context
        run: |
          if [ "${{ matrix.service }}" = "web" ]; then
            echo "path=./apps/web" >> $GITHUB_OUTPUT
          else
            echo "path=./apps/services/${{ matrix.service }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ steps.context.outputs.path }}
          file: ${{ steps.context.outputs.path }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add your smoke test commands here

  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          
      - name: Run health checks
        run: |
          echo "Running health checks..."
          # Add your health check commands here
          
      # Note: Slack notifications disabled - add SLACK_WEBHOOK secret to enable
      # - name: Notify deployment
      #   continue-on-error: true
      #   uses: 8398a7/action-slack@v3
      #   with:
      #     status: ${{ job.status }}
      #     channel: '#deployments'
      #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      #   if: always()

  # Performance monitoring
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # Note: Lighthouse CI disabled - add LHCI_GITHUB_APP_TOKEN secret to enable
      # - name: Run Lighthouse CI
      #   continue-on-error: true
      #   uses: treosh/lighthouse-ci-action@v10
      #   with:
      #     configPath: ./lighthouserc.js
      #     uploadArtifacts: true
      #     temporaryPublicStorage: true
      #   env:
      #     LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Dependency updates
  dependabot:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    needs: test
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    
    steps:
      - name: Auto-merge Dependabot PRs
        uses: ahmadnassri/action-dependabot-auto-merge@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          target: minor
